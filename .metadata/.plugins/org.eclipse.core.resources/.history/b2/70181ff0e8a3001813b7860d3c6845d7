package tree;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import javax.management.Query;

public class BinaryTree {

	Node root;
	int arr[];
	 
    /* Method to calculate the diameter and return it to main */
    int diameter(Node root)
    {
        /* base case if tree is empty */
        if (root == null)
            return 0;
 
        /* get the height of left and right sub trees */
        int lheight = height(root.left);
        int rheight = height(root.right);
 
        /* get the diameter of left and right subtrees */
        int ldiameter = diameter(root.left);
        int rdiameter = diameter(root.right);
 
        /* Return max of following three
          1) Diameter of left subtree
         2) Diameter of right subtree
         3) Height of left subtree + height of right subtree + 1 */
        return Math.max(lheight + rheight + 1,
                        Math.max(ldiameter, rdiameter));
 
    }
 
    /* A wrapper over diameter(Node root) */
    int diameter()
    {
        return diameter(root);
    }
 
    /*The function Compute the "height" of a tree. Height is the
      number f nodes along the longest path from the root node
      down to the farthest leaf node.*/
    static int height(Node node)
    {
        /* base case tree is empty */
        if (node == null)
            return 0;
 
        /* If tree is not empty then height = 1 + max of left
           height and right heights */
        return (1 + Math.max(height(node.left), height(node.right)));
    }
    
/*    
   Start root to leaf path    
*/   
    public int getNumberOfNodesInATree(Node root) {
		if(root==null) {
			return 0;
		}
		return (getNumberOfNodesInATree(root.left) + getNumberOfNodesInATree(root.right)+1);
		
    }
    
    public void instanciateArray() {
    	this.arr = new int[this.getNumberOfNodesInATree(root)];
    }
    
    public void rootToLeafPath(Node root,int length) {
    	
    	if(root==null) {
    		return;
    	}
    	arr[length] = root.data;
    	length++;
    	if(root.left==null && root.right==null) {
    		printArray(length);
    	}
    	rootToLeafPath(root.left, length);
    	rootToLeafPath(root.right, length);
    }
    
    public void printRootToLeafPath(Node root) {
    	this.instanciateArray();
    	this.rootToLeafPath(root, 0);
    }

	private void printArray(int length) {
		for(int i=0;i<length;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
		
	}
	/*    
	   End root to leaf path    
	*/ 
/*
	Start Checking the Existence of path with given sum 
	*/
	
	public void checkExistingPathWithGivenSum(Node root,int sum) {
		this.instanciateArray();
		this.printExistingPathWithGivenSum(root,sum, 0);
	}

	private void printExistingPathWithGivenSum(Node root,int sum, int length) {
		if(root==null || sum <0 ) {
			return;
		}
		arr[length++] = root.data;
		sum = sum - root.data; 
		if(sum==0) {
			this.printArray(length);
			return;
		}
		printExistingPathWithGivenSum(root.left, sum, length);
		printExistingPathWithGivenSum(root.right, sum, length);
	}
	
	/*
	End Checking the Existence of path with given sum 
	*/
	
/*
	Start Level Order Traversal
	
*/	
	public void printLevelOreder(Node root) {
		if(root == null) {
			return;
		}
		
		Queue<Node> queue = new LinkedList<>();
		queue.add(root);
		while(!queue.isEmpty()) {
			Node temp = queue.remove();
			System.out.print(temp.data+" ");
			if(temp.left!=null) {
				queue.add(temp.left);
			}
			if(temp.right!=null) {
				queue.add(temp.right);
			}		
		}
		System.out.println();
	}
	
	public void printZigZagOrder(Node root) {
		if(root == null) {
			return;
		}
		Stack<Node> s1 = new Stack<>();
		s1.push(root);
		Stack<Node> s2 = new Stack<>();
		Stack<Node> temp;
		boolean isLeftToRight = true;
		boolean isRightToLeft = false;
		while() {
			Node node = s1.pop();
			System.out.print(node.data+" ");
				if(node.left!=null) {
					s1.push(root.left);
				}
				if(node.right!=null) {
					s1.push(node.right);
				}
		if(s1.isEmpty()) {		
			temp = s1;
			s1 = s2;
			s2 = temp;
			if(isLeftToRight) {		
				
				isLeftToRight = false;
			}else {
				isLeftToRight = true;
			}
		}
		
		}
		System.out.println();
	}
	
}
