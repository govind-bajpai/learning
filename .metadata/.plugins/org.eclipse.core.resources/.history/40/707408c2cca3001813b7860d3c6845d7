package tree;

public class BinaryTree {

	Node root;
	int arr[];
	 
    /* Method to calculate the diameter and return it to main */
    int diameter(Node root)
    {
        /* base case if tree is empty */
        if (root == null)
            return 0;
 
        /* get the height of left and right sub trees */
        int lheight = height(root.left);
        int rheight = height(root.right);
 
        /* get the diameter of left and right subtrees */
        int ldiameter = diameter(root.left);
        int rdiameter = diameter(root.right);
 
        /* Return max of following three
          1) Diameter of left subtree
         2) Diameter of right subtree
         3) Height of left subtree + height of right subtree + 1 */
        return Math.max(lheight + rheight + 1,
                        Math.max(ldiameter, rdiameter));
 
    }
 
    /* A wrapper over diameter(Node root) */
    int diameter()
    {
        return diameter(root);
    }
 
    /*The function Compute the "height" of a tree. Height is the
      number f nodes along the longest path from the root node
      down to the farthest leaf node.*/
    static int height(Node node)
    {
        /* base case tree is empty */
        if (node == null)
            return 0;
 
        /* If tree is not empty then height = 1 + max of left
           height and right heights */
        return (1 + Math.max(height(node.left), height(node.right)));
    }
    
/*    
   Start root to leaf path    
*/   
    public int getNumberOfNodesInATree(Node root) {
		if(root==null) {
			return 0;
		}
		return (getNumberOfNodesInATree(root.left) + getNumberOfNodesInATree(root.right)+1);
		
    }
    
    public void instanciateArray() {
    	this.arr = new int[this.getNumberOfNodesInATree(root)];
    }
    
    public void rootToLeafPath(Node root,int length) {
    	
    	if(root==null) {
    		return;
    	}
    	arr[length] = root.data;
    	length++;
    	if(root.left==null && root.right==null) {
    		printArray(length);
    	}
    	rootToLeafPath(root.left, length);
    	rootToLeafPath(root.right, length);
    }
    
    public void printRootToLeafPath(Node root) {
    	this.instanciateArray();
    	this.rootToLeafPath(root, 0);
    }

	private void printArray(int length) {
		for(int i=0;i<length;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
		
	}
	/*    
	   End root to leaf path    
	*/ 
/*
	Checking the Existence of path with given sum
	*/
	
	public void checkExistingPathWithGivenSum(Node root,int sum) {
		
	}
}
